# https://learn.microsoft.com/en-us/azure/container-apps/storage-mounts-azure-files?tabs=bash
name: "Azure - Librechat Create Azure Resources"
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  BUILD_VERSION: "v0.7.6"
  IMAGE_NAME: "librechat:custom-${{ env.BUILD_VERSION }}" # This is the correct syntax

jobs:
  build-and-deploy:
    name: "librechat-create-azure-resources"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        continue-on-error: false

      - name: Check and Create Log Analytics Workspace
        id: create_log_workspace
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            # Check if workspace exists
            if ! az monitor log-analytics workspace show --resource-group "${{ vars.RESOURCE_GROUP }}" --workspace-name "${{ vars.LOG_WORKSPACE_NAME }}" &>/dev/null; then
              echo "Creating Log Analytics Workspace..."
              az monitor log-analytics workspace create \
                --resource-group "${{ vars.RESOURCE_GROUP }}" \
                --workspace-name "${{ vars.LOG_WORKSPACE_NAME }}" \
                --location "${{ vars.LOCATION }}" \
                --retention-time "30" \
                --sku "PerGB2018"
            else
              echo "Log Analytics Workspace already exists"
            fi

            # Get the workspace ID
            WORKSPACE_ID=$(az monitor log-analytics workspace show \
              --resource-group "${{ vars.RESOURCE_GROUP }}" \
              --workspace-name "${{ vars.LOG_WORKSPACE_NAME }}" \
              --query customerId -o tsv)

            # Get the workspace Key
            WORKSPACE_KEY=$(az monitor log-analytics workspace get-shared-keys \
              --resource-group "${{ vars.RESOURCE_GROUP }}" \
              --workspace-name "${{ vars.LOG_WORKSPACE_NAME }}" \
              --query primarySharedKey -o tsv)

            # Update Github environment
            echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV
            echo "WORKSPACE_KEY=$WORKSPACE_KEY" >> $GITHUB_ENV

      - name: Check and Create container app environment
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            # Check if container app environment exists
            if ! az containerapp env show --name "${{ vars.ACA_ENVIRONMENT_NAME }}" --resource-group "${{ vars.RESOURCE_GROUP }}" &>/dev/null; then
              echo "Creating Container App Environment..."
              az containerapp env create --name "${{ vars.ACA_ENVIRONMENT_NAME }}" \
                --resource-group "${{ vars.RESOURCE_GROUP }}" \
                --location "${{ vars.LOCATION }}" \
                --logs-destination "log-analytics" \
                --logs-workspace-id "$WORKSPACE_ID" \
                --logs-workspace-key "$WORKSPACE_KEY"
            else
              echo "Container App Environment already exists"
            fi

      - name: Clone LibreChat Repo
        if: ${{ vars.BUILD_IMAGE == 'true' }}
        run: |
          git clone --branch ${{ env.BUILD_VERSION }} https://github.com/danny-avila/LibreChat.git LibreChat-${{ env.BUILD_VERSION }}

      - name: Build image for container app
        if: ${{ vars.BUILD_IMAGE == 'true' }}
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            az acr build \
            --registry "${{ vars.SHARED_AZURE_CONTAINER_REGISTRY }}" \
            --image "${{ env.IMAGE_NAME }}" \
            ./LibreChat-${{ env.BUILD_VERSION }}

      - name: Check and Create Storage Account
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            # Check if storage account exists
            if ! az storage account show --name "${{ vars.STORAGE_ACCOUNT_NAME }}" --resource-group "${{ vars.RESOURCE_GROUP }}" &>/dev/null; then
              echo "Creating Storage Account..."
              az storage account create \
                --name "${{ vars.STORAGE_ACCOUNT_NAME }}" \
                --resource-group "${{ vars.RESOURCE_GROUP }}" \
                --location "${{ vars.LOCATION }}" \
                --sku Standard_LRS \
                --kind StorageV2
            else
              echo "Storage Account already exists"
            fi

      - name: Check and Create Azure File Share
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            # Check if file share exists
            if ! az storage share-rm show --name "${{ vars.FILE_SHARE_NAME }}" --resource-group "${{ vars.RESOURCE_GROUP }}" --storage-account "${{ vars.STORAGE_ACCOUNT_NAME }}" &>/dev/null; then
              echo "Creating Azure File Share..."
              az storage share-rm create \
                --name "${{ vars.FILE_SHARE_NAME }}" \
                --resource-group "${{ vars.RESOURCE_GROUP }}" \
                --storage-account "${{ vars.STORAGE_ACCOUNT_NAME }}" \
                --enabled-protocols "SMB" \
                --access-tier "Cool" \
                --quota "1"
            else
              echo "Azure File Share already exists"
            fi

      - name: Copy files to Azure File Share
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            printf "%s" "${{ vars.CONFIG_YAML }}" > librechat.yaml
            printf "%s" "${{ vars.IZ_GPU_SERVER_NGINX_CA_CERT_ROOT }}" > CA_CERT_ROOT.pem

            # Fetch the primary storage account key
            STORAGE_ACCOUNT_KEY=$(az storage account keys list \
              --resource-group "${{ vars.RESOURCE_GROUP }}" \
              --account-name "${{ vars.STORAGE_ACCOUNT_NAME }}" \
              --query "[0].value" -o tsv)

            # Create config directory in the file share (will not error if it already exists)
            az storage directory create \
              --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} \
              --share-name ${{ vars.FILE_SHARE_NAME }} \
              --name "config" \
              --account-key $STORAGE_ACCOUNT_KEY

            # Upload the app configuration file to the config directory
            az storage file upload \
              --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} \
              --share-name ${{ vars.FILE_SHARE_NAME }} \
              --source "librechat.yaml" \
              --path "config/librechat.yaml" \
              --account-key $STORAGE_ACCOUNT_KEY

            # Upload the app configuration file to the config directory
            az storage file upload \
              --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} \
              --share-name ${{ vars.FILE_SHARE_NAME }} \
              --source "CA_CERT_ROOT.pem" \
              --path "config/CA_CERT_ROOT.pem" \
              --account-key $STORAGE_ACCOUNT_KEY

      - name: Check and Link Azure File Share to Container App Environment
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            # Check if the Azure File Share is linked to the Container App Environment
            if ! az containerapp env storage show --name "${{ vars.ACA_ENVIRONMENT_NAME }}" --resource-group "${{ vars.RESOURCE_GROUP }}" --storage-name "${{ vars.STORAGE_MOUNT_NAME }}" &>/dev/null; then
              echo "Linking Azure File Share to Container App Environment..."

              # Fetch the primary storage account key
              STORAGE_ACCOUNT_KEY=$(az storage account keys list \
                --resource-group "${{ vars.RESOURCE_GROUP }}" \
                --account-name "${{ vars.STORAGE_ACCOUNT_NAME }}" \
                --query "[0].value" -o tsv)

              az containerapp env storage set \
                --access-mode ReadWrite \
                --azure-file-account-name "${{ vars.STORAGE_ACCOUNT_NAME }}" \
                --azure-file-account-key $STORAGE_ACCOUNT_KEY \
                --azure-file-share-name "${{ vars.FILE_SHARE_NAME }}" \
                --storage-name "${{ vars.STORAGE_MOUNT_NAME }}" \
                --name "${{ vars.ACA_ENVIRONMENT_NAME }}" \
                --resource-group "${{ vars.RESOURCE_GROUP }}"
            else
              echo "Azure File Share is already linked to the Container App Environment."
            fi

      - name: Check and Create container app
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            # Check if container app exists
            if ! az containerapp show \
              --name "${{ vars.ACA_APP_NAME }}" \
              --resource-group "${{ vars.RESOURCE_GROUP }}" > /dev/null 2>&1
            then
              echo "Creating Container App Job..."
              az containerapp create \
                --name "${{ vars.ACA_APP_NAME }}" \
                --resource-group "${{ vars.RESOURCE_GROUP }}" \
                --environment "${{ vars.ACA_ENVIRONMENT_NAME }}" \
                --image "${{ vars.SHARED_AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}" \
                --registry-server "${{ vars.SHARED_AZURE_CONTAINER_REGISTRY }}.azurecr.io" \
                --registry-identity "${{ vars.MANAGED_IDENTITY_REGISTRY }}" \
                --scale-rule-name librechat-http-rule \
                --scale-rule-http-concurrency 15 \
                --min-replicas 0 \
                --max-replicas 10 \
                --ingress external \
                --target-port 8000 \
                --secrets "mongo-uri=${{ secrets.MONGO_URI }}" \
                  "creds-key=${{ secrets.CREDS_KEY }}" \
                  "creds-iv=${{ secrets.CREDS_IV }}" \
                  "jwt-secret=${{ secrets.JWT_SECRET }}" \
                  "jwt-refresh-secret=${{ secrets.JWT_REFRESH_SECRET }}" \
                --cpu "0.5" \
                --memory "1.0Gi" \
                --env-vars \
                  "CREDS_IV=secretref:creds-iv" \
                  "CREDS_KEY=secretref:creds-key" \
                  "JWT_SECRET=secretref:jwt-secret" \
                  "JWT_REFRESH_SECRET=secretref:jwt-refresh-secret" \
                  "MONGO_URI=secretref:mongo-uri" \
                  "CONFIG_PATH=${{ vars.CONFIG_PATH }}" \
                  "NODE_EXTRA_CA_CERTS=${{ vars.NODE_EXTRA_CA_CERTS_PATH }}"
            else
              echo "Container App already exists"
            fi

      - name: Export container app configuration
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            # Export container app configuration
            az containerapp show \
            --name "${{ vars.ACA_APP_NAME }}" \
            --resource-group "${{ vars.RESOURCE_GROUP }}" \
            --output yaml > container_app_config.yaml

      # https://github.com/fjogeleit/yaml-update-action/?tab=readme-ov-file#multi-value-changes
      - name: Update container app configuration with the volume mount.
        uses: fjogeleit/yaml-update-action@v0.16.0
        with:
          valueFile: "container_app_config.yaml"
          commitChange: false
          changes: |
            {
              "container_app_config.yaml": {
                "properties.template.volumes": [
                  {
                    "name": "librechat-config",
                    "storageType": "AzureFile",
                    "storageName": "librechat-storage-mount"
                  }
                ],
                "properties.template.containers[0].volumeMounts": [
                  {
                    "volumeName": "librechat-config",
                    "mountPath": "/mnt"
                  }
                ]
              }
            }

      - name: Update Container app
        uses: Azure/cli@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            cat container_app_config.yaml
